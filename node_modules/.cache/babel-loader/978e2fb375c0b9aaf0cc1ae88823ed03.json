{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu2004/Projets/marvel-test/src/components/Quiz/index.js\";\nimport React, { Component } from \"react\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\nimport { QuizMarvel } from \"../QuizMarvel \";\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      levelNames: [\"debutant\", \"confirme\", \"expert\"],\n      quizLevel: 0,\n      maxQuestions: 10,\n      storedQuestion: [],\n      question: null,\n      options: [],\n      idQuestion: 0,\n      btnDisabled: true,\n      userAnswer: null,\n      score: 0\n    };\n    this.storedDataRef = React.createRef();\n\n    this.loadQuestion = quizz => {\n      const fetchedArrayQuiz = QuizMarvel[0].quizz[quizz];\n\n      if (fetchedArrayQuiz.length >= this.state.maxQuestions) {\n        this.storedDataRef.current = fetchedArrayQuiz;\n        const newArray = fetchedArrayQuiz.map(({\n          answer,\n          ...keepRest\n        }) => keepRest);\n        this.setState({\n          storedQuestion: newArray\n        });\n      } else {\n        console.log(\"Pas assez de questions\");\n      }\n    };\n\n    this.nextQuestion = () => {\n      if (this.idQuestion === this.maxQuestions - 1) {} else {\n        this.setState({\n          idQuestion: PrevState.idQuestion + 1\n        });\n        const goodAnswer = this.storedDataRef.current[this.state.idQuestion].answer;\n\n        if (this.state.userAnswer === goodAnswer) {\n          this.setState(PrevState => {\n            score: PrevState.score + 1;\n          });\n        }\n      }\n    };\n\n    this.submitAnswer = selectedAnswer => {\n      this.setState({\n        userAnswer: selectedAnswer,\n        btnDisabled: false\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.loadQuestion(this.state.levelNames[this.state.quizLevel]);\n  }\n\n  componentDidUpdate(PrevProps, PrevState) {\n    if (this.state.storedQuestion !== PrevState.storedQuestion) {\n      this.setState({\n        question: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options\n      });\n      console.log(this.state.question);\n    }\n  }\n\n  render() {\n    const displayOptions = this.state.options.map((option, index) => {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        key: index,\n        className: `answerOptions ${this.state.userAnswer == option ? \"selected\" : null}`,\n        onClick: () => this.submitAnswer(option),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }\n      }, option);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Levels, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ProgressBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, this.state.question), displayOptions, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.nextQuestion,\n      disabled: this.state.btnDisabled,\n      className: \"btnSubmit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }, \"Suivant\"));\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/home/ubuntu2004/Projets/marvel-test/src/components/Quiz/index.js"],"names":["React","Component","Levels","ProgressBar","QuizMarvel","Quiz","state","levelNames","quizLevel","maxQuestions","storedQuestion","question","options","idQuestion","btnDisabled","userAnswer","score","storedDataRef","createRef","loadQuestion","quizz","fetchedArrayQuiz","length","current","newArray","map","answer","keepRest","setState","console","log","nextQuestion","PrevState","goodAnswer","submitAnswer","selectedAnswer","componentDidMount","componentDidUpdate","PrevProps","render","displayOptions","option","index"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\nimport { QuizMarvel } from \"../QuizMarvel \";\n\nclass Quiz extends Component {\n  state = {\n    levelNames: [\"debutant\", \"confirme\", \"expert\"],\n    quizLevel: 0,\n    maxQuestions: 10,\n    storedQuestion: [],\n    question: null,\n    options: [],\n    idQuestion: 0,\n    btnDisabled: true,\n    userAnswer: null,\n    score: 0,\n  };\n\n  storedDataRef = React.createRef();\n\n  loadQuestion = (quizz) => {\n    const fetchedArrayQuiz = QuizMarvel[0].quizz[quizz];\n    if (fetchedArrayQuiz.length >= this.state.maxQuestions) {\n      this.storedDataRef.current = fetchedArrayQuiz;\n\n      const newArray = fetchedArrayQuiz.map(\n        ({ answer, ...keepRest }) => keepRest\n      );\n      this.setState({\n        storedQuestion: newArray,\n      });\n    } else {\n      console.log(\"Pas assez de questions\");\n    }\n  };\n  componentDidMount() {\n    this.loadQuestion(this.state.levelNames[this.state.quizLevel]);\n  }\n\n  nextQuestion = () => {\n    if (this.idQuestion === this.maxQuestions - 1) {\n    } else {\n      this.setState({\n        idQuestion: PrevState.idQuestion + 1,\n      });\n      const goodAnswer = this.storedDataRef.current[this.state.idQuestion]\n        .answer;\n      if (this.state.userAnswer === goodAnswer) {\n        this.setState((PrevState) => {\n          score: PrevState.score + 1;\n        });\n      }\n    }\n  };\n\n  componentDidUpdate(PrevProps, PrevState) {\n    if (this.state.storedQuestion !== PrevState.storedQuestion) {\n      this.setState({\n        question: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options,\n      });\n      console.log(this.state.question);\n    }\n  }\n\n  submitAnswer = (selectedAnswer) => {\n    this.setState({\n      userAnswer: selectedAnswer,\n      btnDisabled: false,\n    });\n  };\n  render() {\n    const displayOptions = this.state.options.map((option, index) => {\n      return (\n        <p\n          key={index}\n          className={`answerOptions ${\n            this.state.userAnswer == option ? \"selected\" : null\n          }`}\n          onClick={() => this.submitAnswer(option)}\n        >\n          {option}\n        </p>\n      );\n    });\n    return (\n      <div>\n        <Levels />\n        <ProgressBar />\n        <h2>{this.state.question}</h2>\n        {displayOptions}\n        <button\n          onClick={this.nextQuestion}\n          disabled={this.state.btnDisabled}\n          className=\"btnSubmit\"\n        >\n          Suivant\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}