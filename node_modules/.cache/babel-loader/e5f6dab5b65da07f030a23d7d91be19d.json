{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu2004/Projets/marvel-test/src/components/Quiz/index.js\";\nimport React, { Component } from \"react\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\nimport { QuizMarvel } from \"../QuizMarvel \";\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      levelNames: [\"debutant\", \"confirme\", \"expert\"],\n      quizLevel: 0,\n      maxQuestions: 10,\n      storedQuestion: [],\n      question: null,\n      options: [],\n      idQuestion: 0,\n      btnDisabled: true\n    };\n\n    this.loadQuestion = quizz => {\n      const fetchedArrayQuiz = QuizMarvel[0].quizz[quizz];\n\n      if (fetchedArrayQuiz.length >= this.state.maxQuestions) {\n        const newArray = fetchedArrayQuiz.map(({\n          answer,\n          ...keepRest\n        }) => keepRest);\n        this.setState({\n          storedQuestion: newArray\n        });\n      } else {\n        console.log(\"Pas assez de questions\");\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.loadQuestion(this.state.levelNames[this.state.quizLevel]);\n  }\n\n  componentDidUpdate(PrevProps, PrevState) {\n    if (this.state.storedQuestion !== PrevState.storedQuestion) {\n      this.setState({\n        question: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options\n      });\n      console.log(this.state.question);\n    }\n  }\n\n  render() {\n    const displayOptions = this.state.options.map((option, index) => {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        key: index,\n        className: \"answerOptions\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }\n      }, option);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Levels, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ProgressBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, this.state.question), displayOptions, /*#__PURE__*/React.createElement(\"button\", {\n      disabled: this.state.btnDisabled,\n      className: \"btnSubmit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, \"Suivant\"));\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/home/ubuntu2004/Projets/marvel-test/src/components/Quiz/index.js"],"names":["React","Component","Levels","ProgressBar","QuizMarvel","Quiz","state","levelNames","quizLevel","maxQuestions","storedQuestion","question","options","idQuestion","btnDisabled","loadQuestion","quizz","fetchedArrayQuiz","length","newArray","map","answer","keepRest","setState","console","log","componentDidMount","componentDidUpdate","PrevProps","PrevState","render","displayOptions","option","index"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\nimport { QuizMarvel } from \"../QuizMarvel \";\n\nclass Quiz extends Component {\n  state = {\n    levelNames: [\"debutant\", \"confirme\", \"expert\"],\n    quizLevel: 0,\n    maxQuestions: 10,\n    storedQuestion: [],\n    question: null,\n    options: [],\n    idQuestion: 0,\n    btnDisabled: true,\n  };\n\n  loadQuestion = (quizz) => {\n    const fetchedArrayQuiz = QuizMarvel[0].quizz[quizz];\n    if (fetchedArrayQuiz.length >= this.state.maxQuestions) {\n      const newArray = fetchedArrayQuiz.map(\n        ({ answer, ...keepRest }) => keepRest\n      );\n      this.setState({\n        storedQuestion: newArray,\n      });\n    } else {\n      console.log(\"Pas assez de questions\");\n    }\n  };\n  componentDidMount() {\n    this.loadQuestion(this.state.levelNames[this.state.quizLevel]);\n  }\n\n  componentDidUpdate(PrevProps, PrevState) {\n    if (this.state.storedQuestion !== PrevState.storedQuestion) {\n      this.setState({\n        question: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options,\n      });\n      console.log(this.state.question);\n    }\n  }\n\n  render() {\n    const displayOptions = this.state.options.map((option, index) => {\n      return (\n        <p key={index} className=\"answerOptions\">\n          {option}\n        </p>\n      );\n    });\n    return (\n      <div>\n        <Levels />\n        <ProgressBar />\n        <h2>{this.state.question}</h2>\n        {displayOptions}\n        <button disabled={this.state.btnDisabled} className=\"btnSubmit\">\n          Suivant\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}