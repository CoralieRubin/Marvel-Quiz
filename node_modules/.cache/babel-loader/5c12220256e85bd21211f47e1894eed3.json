{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu2004/Projets/marvel-test/src/components/Quiz/index.js\";\nimport React, { Component } from \"react\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\nimport { QuizMarvel } from \"../QuizMarvel \";\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      levelNames: [\"debutant\", \"confirme\", \"expert\"],\n      quizLevel: 0,\n      maxQuestions: 10,\n      storedQuestion: [],\n      question: null,\n      options: []\n    };\n\n    this.loadQuestion = quizz => {\n      const fetchedArrayQuiz = QuizMarvel[0].quizz[quizz];\n\n      if (fetchedArrayQuiz.length >= this.state.maxQuestions) {\n        const newArray = fetchedArrayQuiz.map(({\n          answer,\n          ...keepRest\n        }) => keepRest);\n        this.setState({\n          storedQuestion: newArray\n        });\n      } else {\n        console.log(\"Pas assez de questions\");\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.loadQuestion(this.state.levelNames[this.state.quizLevel]);\n  }\n\n  componentDidUpdate(PrevProps, PrevState) {\n    if (this.state.storedQuestion !== PrevState.storedQuestion) {}\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Levels, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ProgressBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, \"Questions quizz \"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"answerOptions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, \"Question 1\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"answerOptions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }, \"Question 2\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"answerOptions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }, \"Question 3\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"answerOptions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, \"Question 4\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btnSubmit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, \"Suivant\"));\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/home/ubuntu2004/Projets/marvel-test/src/components/Quiz/index.js"],"names":["React","Component","Levels","ProgressBar","QuizMarvel","Quiz","state","levelNames","quizLevel","maxQuestions","storedQuestion","question","options","loadQuestion","quizz","fetchedArrayQuiz","length","newArray","map","answer","keepRest","setState","console","log","componentDidMount","componentDidUpdate","PrevProps","PrevState","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,UAAT,QAA2B,gBAA3B;;AAEA,MAAMC,IAAN,SAAmBJ,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAC3BK,KAD2B,GACnB;AACNC,MAAAA,UAAU,EAAE,CAAC,UAAD,EAAa,UAAb,EAAyB,QAAzB,CADN;AAENC,MAAAA,SAAS,EAAE,CAFL;AAGNC,MAAAA,YAAY,EAAE,EAHR;AAINC,MAAAA,cAAc,EAAE,EAJV;AAKNC,MAAAA,QAAQ,EAAE,IALJ;AAMNC,MAAAA,OAAO,EAAE;AANH,KADmB;;AAAA,SAU3BC,YAV2B,GAUXC,KAAD,IAAW;AACxB,YAAMC,gBAAgB,GAAGX,UAAU,CAAC,CAAD,CAAV,CAAcU,KAAd,CAAoBA,KAApB,CAAzB;;AACA,UAAIC,gBAAgB,CAACC,MAAjB,IAA2B,KAAKV,KAAL,CAAWG,YAA1C,EAAwD;AACtD,cAAMQ,QAAQ,GAAGF,gBAAgB,CAACG,GAAjB,CACf,CAAC;AAAEC,UAAAA,MAAF;AAAU,aAAGC;AAAb,SAAD,KAA6BA,QADd,CAAjB;AAGA,aAAKC,QAAL,CAAc;AACZX,UAAAA,cAAc,EAAEO;AADJ,SAAd;AAGD,OAPD,MAOO;AACLK,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD;AACF,KAtB0B;AAAA;;AAuB3BC,EAAAA,iBAAiB,GAAG;AAClB,SAAKX,YAAL,CAAkB,KAAKP,KAAL,CAAWC,UAAX,CAAsB,KAAKD,KAAL,CAAWE,SAAjC,CAAlB;AACD;;AAEDiB,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACvC,QAAI,KAAKrB,KAAL,CAAWI,cAAX,KAA8BiB,SAAS,CAACjB,cAA5C,EAA4D,CAC3D;AACF;;AAEDkB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAHF,eAIE;AAAG,MAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,eAKE;AAAG,MAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALF,eAME;AAAG,MAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANF,eAOE;AAAG,MAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF,eAQE;AAAQ,MAAA,SAAS,EAAC,WAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBARF,CADF;AAYD;;AA7C0B;;AAgD7B,eAAevB,IAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\nimport { QuizMarvel } from \"../QuizMarvel \";\n\nclass Quiz extends Component {\n  state = {\n    levelNames: [\"debutant\", \"confirme\", \"expert\"],\n    quizLevel: 0,\n    maxQuestions: 10,\n    storedQuestion: [],\n    question: null,\n    options: [],\n  };\n\n  loadQuestion = (quizz) => {\n    const fetchedArrayQuiz = QuizMarvel[0].quizz[quizz];\n    if (fetchedArrayQuiz.length >= this.state.maxQuestions) {\n      const newArray = fetchedArrayQuiz.map(\n        ({ answer, ...keepRest }) => keepRest\n      );\n      this.setState({\n        storedQuestion: newArray,\n      });\n    } else {\n      console.log(\"Pas assez de questions\");\n    }\n  };\n  componentDidMount() {\n    this.loadQuestion(this.state.levelNames[this.state.quizLevel]);\n  }\n\n  componentDidUpdate(PrevProps, PrevState) {\n    if (this.state.storedQuestion !== PrevState.storedQuestion) {\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Levels />\n        <ProgressBar />\n        <h2>Questions quizz </h2>\n        <p className=\"answerOptions\">Question 1</p>\n        <p className=\"answerOptions\">Question 2</p>\n        <p className=\"answerOptions\">Question 3</p>\n        <p className=\"answerOptions\">Question 4</p>\n        <button className=\"btnSubmit\">Suivant</button>\n      </div>\n    );\n  }\n}\n\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}