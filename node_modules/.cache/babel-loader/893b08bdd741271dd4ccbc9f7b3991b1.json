{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu2004/Projets/marvel-test/src/components/Quiz/index.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\nimport { QuizMarvel } from \"../QuizMarvel \";\nimport QuizOver from \"../QuizOver\";\ntoast.configure();\n\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadQuestion = quizz => {\n      const fetchedArrayQuiz = QuizMarvel[0].quizz[quizz];\n\n      if (fetchedArrayQuiz.length >= this.state.maxQuestions) {\n        this.storedDataRef.current = fetchedArrayQuiz;\n        const newArray = fetchedArrayQuiz.map(({\n          answer,\n          ...keepRest\n        }) => keepRest);\n        this.setState({\n          storedQuestion: newArray\n        });\n      } else {\n        console.log(\"Pas assez de questions\");\n      }\n    };\n\n    this.showToastMsg = pseudo => {\n      if (!this.state.showWelcomeMsg) {\n        this.setState({\n          showWelcomeMsg: true\n        });\n        toast.warn(`Bienvenue ${pseudo}, et bonne chance!`, {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: false,\n          bodyClassName: \"toastify-color-welcome\"\n        });\n      }\n    };\n\n    this.nextQuestion = () => {\n      if (this.state.idQuestion === this.state.maxQuestions - 1) {\n        //this.gameOver();\n        this.setState({\n          quizEnd: true\n        });\n      } else {\n        this.setState(prevState => ({\n          idQuestion: prevState.idQuestion + 1\n        }));\n      }\n\n      const goodAnswer = this.storedDataRef.current[this.state.idQuestion].answer;\n\n      if (this.state.userAnswer === goodAnswer) {\n        this.setState(prevState => ({\n          score: prevState.score + 1\n        }));\n        toast.success(\"Bravo +1\", {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          bodyClassName: \"toastify-color\"\n        });\n      } else {\n        toast.error(\"RatÃ© 0\", {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          bodyClassName: \"toastify-color\"\n        });\n      }\n    };\n\n    this.submitAnswer = selectedAnswer => {\n      this.setState({\n        userAnswer: selectedAnswer,\n        btnDisabled: false\n      });\n    };\n\n    this.getPercentage = (maxquest, ourScore) => ourScore / maxquest * 100;\n\n    this.gameOver = () => {\n      const gradePercent = this.getPercentage(this.state.maxQuestions, this.state.score);\n\n      if (gradePercent >= 50) {\n        this.setState({\n          quizLevel: this.state.quizLevel + 1,\n          percent: gradePercent\n        });\n      } else {\n        this.setState({\n          percent: gradePercent\n        });\n      }\n    };\n\n    this.loadLevelQuestion = param => {\n      this.setState({ ...this.initialState,\n        quizLevel: param\n      });\n      this.loadQuestion(this.state.levelNames[param]);\n    };\n\n    this.initialState = {\n      levelNames: [\"debutant\", \"confirme\", \"expert\"],\n      quizLevel: 0,\n      maxQuestions: 10,\n      storedQuestion: [],\n      question: null,\n      options: [],\n      idQuestion: 0,\n      btnDisabled: true,\n      userAnswer: null,\n      score: 0,\n      showWelcomeMsg: false,\n      quizEnd: false,\n      percent: null\n    };\n    this.state = this.initialState;\n    this.storedDataRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.loadQuestion(this.state.levelNames[this.state.quizLevel]);\n  }\n\n  componentDidUpdate(PrevProps, prevState) {\n    if (this.state.storedQuestion !== prevState.storedQuestion && this.state.storedQuestion.length) {\n      this.setState({\n        question: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options\n      });\n    }\n\n    if (this.state.idQuestion !== prevState.idQuestion && this.state.storedQuestion.length) {\n      this.setState({\n        question: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options,\n        userAnswer: null,\n        btnDisabled: true\n      });\n    }\n\n    if (this.props.userData.pseudo !== PrevProps.userData.pseudo) {\n      this.showToastMsg(this.props.userData.pseudo);\n    }\n  }\n\n  render() {\n    const displayOptions = this.state.options.map((option, index) => {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        key: index,\n        className: `answerOptions ${this.state.userAnswer === option ? \"selected\" : null}`,\n        onClick: () => this.submitAnswer(option),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 9\n        }\n      }, option);\n    });\n    return this.state.quizEnd ? /*#__PURE__*/React.createElement(QuizOver, {\n      ref: this.storedDataRef,\n      levelNames: this.state.levelNames,\n      score: this.state.score,\n      maxQuestion: this.state.maxQuestions,\n      quizLevel: this.state.quizLevel,\n      percent: this.state.percent,\n      loadLevelQuestion: this.loadLevelQuestion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 7\n      }\n    }) : /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Levels, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ProgressBar, {\n      idQuestion: this.state.idQuestion,\n      maxQuestions: this.state.maxQuestions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }\n    }, this.state.question), displayOptions, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.nextQuestion,\n      disabled: this.state.btnDisabled,\n      className: \"btnSubmit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }\n    }, this.state.idQuestion < this.state.maxQuestions - 1 ? \"Suivant\" : \"Terminer\"));\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/home/ubuntu2004/Projets/marvel-test/src/components/Quiz/index.js"],"names":["React","Component","Fragment","toast","Levels","ProgressBar","QuizMarvel","QuizOver","configure","Quiz","constructor","props","loadQuestion","quizz","fetchedArrayQuiz","length","state","maxQuestions","storedDataRef","current","newArray","map","answer","keepRest","setState","storedQuestion","console","log","showToastMsg","pseudo","showWelcomeMsg","warn","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","bodyClassName","nextQuestion","idQuestion","quizEnd","prevState","goodAnswer","userAnswer","score","success","error","submitAnswer","selectedAnswer","btnDisabled","getPercentage","maxquest","ourScore","gameOver","gradePercent","quizLevel","percent","loadLevelQuestion","param","initialState","levelNames","question","options","createRef","componentDidMount","componentDidUpdate","PrevProps","userData","render","displayOptions","option","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAO,2CAAP;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEAJ,KAAK,CAACK,SAAN;;AAEA,MAAMC,IAAN,SAAmBR,SAAnB,CAA6B;AAC3BS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAsBnBC,YAtBmB,GAsBHC,KAAD,IAAW;AACxB,YAAMC,gBAAgB,GAAGR,UAAU,CAAC,CAAD,CAAV,CAAcO,KAAd,CAAoBA,KAApB,CAAzB;;AACA,UAAIC,gBAAgB,CAACC,MAAjB,IAA2B,KAAKC,KAAL,CAAWC,YAA1C,EAAwD;AACtD,aAAKC,aAAL,CAAmBC,OAAnB,GAA6BL,gBAA7B;AAEA,cAAMM,QAAQ,GAAGN,gBAAgB,CAACO,GAAjB,CACf,CAAC;AAAEC,UAAAA,MAAF;AAAU,aAAGC;AAAb,SAAD,KAA6BA,QADd,CAAjB;AAGA,aAAKC,QAAL,CAAc;AACZC,UAAAA,cAAc,EAAEL;AADJ,SAAd;AAGD,OATD,MASO;AACLM,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD;AACF,KApCkB;;AAAA,SAsCnBC,YAtCmB,GAsCHC,MAAD,IAAY;AACzB,UAAI,CAAC,KAAKb,KAAL,CAAWc,cAAhB,EAAgC;AAC9B,aAAKN,QAAL,CAAc;AACZM,UAAAA,cAAc,EAAE;AADJ,SAAd;AAGA3B,QAAAA,KAAK,CAAC4B,IAAN,CAAY,aAAYF,MAAO,oBAA/B,EAAoD;AAClDG,UAAAA,QAAQ,EAAE,WADwC;AAElDC,UAAAA,SAAS,EAAE,IAFuC;AAGlDC,UAAAA,eAAe,EAAE,KAHiC;AAIlDC,UAAAA,YAAY,EAAE,IAJoC;AAKlDC,UAAAA,YAAY,EAAE,IALoC;AAMlDC,UAAAA,SAAS,EAAE,KANuC;AAOlDC,UAAAA,aAAa,EAAE;AAPmC,SAApD;AASD;AACF,KArDkB;;AAAA,SA0DnBC,YA1DmB,GA0DJ,MAAM;AACnB,UAAI,KAAKvB,KAAL,CAAWwB,UAAX,KAA0B,KAAKxB,KAAL,CAAWC,YAAX,GAA0B,CAAxD,EAA2D;AACzD;AACA,aAAKO,QAAL,CAAc;AACZiB,UAAAA,OAAO,EAAE;AADG,SAAd;AAGD,OALD,MAKO;AACL,aAAKjB,QAAL,CAAekB,SAAD,KAAgB;AAAEF,UAAAA,UAAU,EAAEE,SAAS,CAACF,UAAV,GAAuB;AAArC,SAAhB,CAAd;AACD;;AAED,YAAMG,UAAU,GAAG,KAAKzB,aAAL,CAAmBC,OAAnB,CAA2B,KAAKH,KAAL,CAAWwB,UAAtC,EAAkDlB,MAArE;;AACA,UAAI,KAAKN,KAAL,CAAW4B,UAAX,KAA0BD,UAA9B,EAA0C;AACxC,aAAKnB,QAAL,CAAekB,SAAD,KAAgB;AAAEG,UAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,GAAkB;AAA3B,SAAhB,CAAd;AAEA1C,QAAAA,KAAK,CAAC2C,OAAN,CAAc,UAAd,EAA0B;AACxBd,UAAAA,QAAQ,EAAE,WADc;AAExBC,UAAAA,SAAS,EAAE,IAFa;AAGxBC,UAAAA,eAAe,EAAE,KAHO;AAIxBC,UAAAA,YAAY,EAAE,IAJU;AAKxBC,UAAAA,YAAY,EAAE,IALU;AAMxBC,UAAAA,SAAS,EAAE,IANa;AAOxBC,UAAAA,aAAa,EAAE;AAPS,SAA1B;AASD,OAZD,MAYO;AACLnC,QAAAA,KAAK,CAAC4C,KAAN,CAAY,QAAZ,EAAsB;AACpBf,UAAAA,QAAQ,EAAE,WADU;AAEpBC,UAAAA,SAAS,EAAE,IAFS;AAGpBC,UAAAA,eAAe,EAAE,KAHG;AAIpBC,UAAAA,YAAY,EAAE,IAJM;AAKpBC,UAAAA,YAAY,EAAE,IALM;AAMpBC,UAAAA,SAAS,EAAE,IANS;AAOpBC,UAAAA,aAAa,EAAE;AAPK,SAAtB;AASD;AACF,KA5FkB;;AAAA,SAyHnBU,YAzHmB,GAyHHC,cAAD,IAAoB;AACjC,WAAKzB,QAAL,CAAc;AACZoB,QAAAA,UAAU,EAAEK,cADA;AAEZC,QAAAA,WAAW,EAAE;AAFD,OAAd;AAID,KA9HkB;;AAAA,SAgInBC,aAhImB,GAgIH,CAACC,QAAD,EAAWC,QAAX,KAAyBA,QAAQ,GAAGD,QAAZ,GAAwB,GAhI7C;;AAAA,SAkInBE,QAlImB,GAkIR,MAAM;AACf,YAAMC,YAAY,GAAG,KAAKJ,aAAL,CACnB,KAAKnC,KAAL,CAAWC,YADQ,EAEnB,KAAKD,KAAL,CAAW6B,KAFQ,CAArB;;AAKA,UAAIU,YAAY,IAAI,EAApB,EAAwB;AACtB,aAAK/B,QAAL,CAAc;AACZgC,UAAAA,SAAS,EAAE,KAAKxC,KAAL,CAAWwC,SAAX,GAAuB,CADtB;AAEZC,UAAAA,OAAO,EAAEF;AAFG,SAAd;AAID,OALD,MAKO;AACL,aAAK/B,QAAL,CAAc;AACZiC,UAAAA,OAAO,EAAEF;AADG,SAAd;AAGD;AACF,KAlJkB;;AAAA,SAoJnBG,iBApJmB,GAoJEC,KAAD,IAAW;AAC7B,WAAKnC,QAAL,CAAc,EACZ,GAAG,KAAKoC,YADI;AAEZJ,QAAAA,SAAS,EAAEG;AAFC,OAAd;AAIA,WAAK/C,YAAL,CAAkB,KAAKI,KAAL,CAAW6C,UAAX,CAAsBF,KAAtB,CAAlB;AACD,KA1JkB;;AAEjB,SAAKC,YAAL,GAAoB;AAClBC,MAAAA,UAAU,EAAE,CAAC,UAAD,EAAa,UAAb,EAAyB,QAAzB,CADM;AAElBL,MAAAA,SAAS,EAAE,CAFO;AAGlBvC,MAAAA,YAAY,EAAE,EAHI;AAIlBQ,MAAAA,cAAc,EAAE,EAJE;AAKlBqC,MAAAA,QAAQ,EAAE,IALQ;AAMlBC,MAAAA,OAAO,EAAE,EANS;AAOlBvB,MAAAA,UAAU,EAAE,CAPM;AAQlBU,MAAAA,WAAW,EAAE,IARK;AASlBN,MAAAA,UAAU,EAAE,IATM;AAUlBC,MAAAA,KAAK,EAAE,CAVW;AAWlBf,MAAAA,cAAc,EAAE,KAXE;AAYlBW,MAAAA,OAAO,EAAE,KAZS;AAalBgB,MAAAA,OAAO,EAAE;AAbS,KAApB;AAgBA,SAAKzC,KAAL,GAAa,KAAK4C,YAAlB;AACA,SAAK1C,aAAL,GAAqBlB,KAAK,CAACgE,SAAN,EAArB;AACD;;AAkCDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKrD,YAAL,CAAkB,KAAKI,KAAL,CAAW6C,UAAX,CAAsB,KAAK7C,KAAL,CAAWwC,SAAjC,CAAlB;AACD;;AAqCDU,EAAAA,kBAAkB,CAACC,SAAD,EAAYzB,SAAZ,EAAuB;AACvC,QACE,KAAK1B,KAAL,CAAWS,cAAX,KAA8BiB,SAAS,CAACjB,cAAxC,IACA,KAAKT,KAAL,CAAWS,cAAX,CAA0BV,MAF5B,EAGE;AACA,WAAKS,QAAL,CAAc;AACZsC,QAAAA,QAAQ,EAAE,KAAK9C,KAAL,CAAWS,cAAX,CAA0B,KAAKT,KAAL,CAAWwB,UAArC,EAAiDsB,QAD/C;AAEZC,QAAAA,OAAO,EAAE,KAAK/C,KAAL,CAAWS,cAAX,CAA0B,KAAKT,KAAL,CAAWwB,UAArC,EAAiDuB;AAF9C,OAAd;AAID;;AAED,QACE,KAAK/C,KAAL,CAAWwB,UAAX,KAA0BE,SAAS,CAACF,UAApC,IACA,KAAKxB,KAAL,CAAWS,cAAX,CAA0BV,MAF5B,EAGE;AACA,WAAKS,QAAL,CAAc;AACZsC,QAAAA,QAAQ,EAAE,KAAK9C,KAAL,CAAWS,cAAX,CAA0B,KAAKT,KAAL,CAAWwB,UAArC,EAAiDsB,QAD/C;AAEZC,QAAAA,OAAO,EAAE,KAAK/C,KAAL,CAAWS,cAAX,CAA0B,KAAKT,KAAL,CAAWwB,UAArC,EAAiDuB,OAF9C;AAGZnB,QAAAA,UAAU,EAAE,IAHA;AAIZM,QAAAA,WAAW,EAAE;AAJD,OAAd;AAMD;;AAED,QAAI,KAAKvC,KAAL,CAAWyD,QAAX,CAAoBvC,MAApB,KAA+BsC,SAAS,CAACC,QAAV,CAAmBvC,MAAtD,EAA8D;AAC5D,WAAKD,YAAL,CAAkB,KAAKjB,KAAL,CAAWyD,QAAX,CAAoBvC,MAAtC;AACD;AACF;;AAqCDwC,EAAAA,MAAM,GAAG;AACP,UAAMC,cAAc,GAAG,KAAKtD,KAAL,CAAW+C,OAAX,CAAmB1C,GAAnB,CAAuB,CAACkD,MAAD,EAASC,KAAT,KAAmB;AAC/D,0BACE;AACE,QAAA,GAAG,EAAEA,KADP;AAEE,QAAA,SAAS,EAAG,iBACV,KAAKxD,KAAL,CAAW4B,UAAX,KAA0B2B,MAA1B,GAAmC,UAAnC,GAAgD,IACjD,EAJH;AAKE,QAAA,OAAO,EAAE,MAAM,KAAKvB,YAAL,CAAkBuB,MAAlB,CALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOGA,MAPH,CADF;AAWD,KAZsB,CAAvB;AAcA,WAAO,KAAKvD,KAAL,CAAWyB,OAAX,gBACL,oBAAC,QAAD;AACE,MAAA,GAAG,EAAE,KAAKvB,aADZ;AAEE,MAAA,UAAU,EAAE,KAAKF,KAAL,CAAW6C,UAFzB;AAGE,MAAA,KAAK,EAAE,KAAK7C,KAAL,CAAW6B,KAHpB;AAIE,MAAA,WAAW,EAAE,KAAK7B,KAAL,CAAWC,YAJ1B;AAKE,MAAA,SAAS,EAAE,KAAKD,KAAL,CAAWwC,SALxB;AAME,MAAA,OAAO,EAAE,KAAKxC,KAAL,CAAWyC,OANtB;AAOE,MAAA,iBAAiB,EAAE,KAAKC,iBAP1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADK,gBAWL,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,WAAD;AACE,MAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWwB,UADzB;AAEE,MAAA,YAAY,EAAE,KAAKxB,KAAL,CAAWC,YAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKD,KAAL,CAAW8C,QAAhB,CANF,EAOGQ,cAPH,eAQE;AACE,MAAA,OAAO,EAAE,KAAK/B,YADhB;AAEE,MAAA,QAAQ,EAAE,KAAKvB,KAAL,CAAWkC,WAFvB;AAGE,MAAA,SAAS,EAAC,WAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKG,KAAKlC,KAAL,CAAWwB,UAAX,GAAwB,KAAKxB,KAAL,CAAWC,YAAX,GAA0B,CAAlD,GACG,SADH,GAEG,UAPN,CARF,CAXF;AA8BD;;AA1M0B;;AA6M7B,eAAeR,IAAf","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\nimport { QuizMarvel } from \"../QuizMarvel \";\nimport QuizOver from \"../QuizOver\";\n\ntoast.configure();\n\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n    this.initialState = {\n      levelNames: [\"debutant\", \"confirme\", \"expert\"],\n      quizLevel: 0,\n      maxQuestions: 10,\n      storedQuestion: [],\n      question: null,\n      options: [],\n      idQuestion: 0,\n      btnDisabled: true,\n      userAnswer: null,\n      score: 0,\n      showWelcomeMsg: false,\n      quizEnd: false,\n      percent: null,\n    };\n\n    this.state = this.initialState;\n    this.storedDataRef = React.createRef();\n  }\n\n  loadQuestion = (quizz) => {\n    const fetchedArrayQuiz = QuizMarvel[0].quizz[quizz];\n    if (fetchedArrayQuiz.length >= this.state.maxQuestions) {\n      this.storedDataRef.current = fetchedArrayQuiz;\n\n      const newArray = fetchedArrayQuiz.map(\n        ({ answer, ...keepRest }) => keepRest\n      );\n      this.setState({\n        storedQuestion: newArray,\n      });\n    } else {\n      console.log(\"Pas assez de questions\");\n    }\n  };\n\n  showToastMsg = (pseudo) => {\n    if (!this.state.showWelcomeMsg) {\n      this.setState({\n        showWelcomeMsg: true,\n      });\n      toast.warn(`Bienvenue ${pseudo}, et bonne chance!`, {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: false,\n        bodyClassName: \"toastify-color-welcome\",\n      });\n    }\n  };\n  componentDidMount() {\n    this.loadQuestion(this.state.levelNames[this.state.quizLevel]);\n  }\n\n  nextQuestion = () => {\n    if (this.state.idQuestion === this.state.maxQuestions - 1) {\n      //this.gameOver();\n      this.setState({\n        quizEnd: true,\n      });\n    } else {\n      this.setState((prevState) => ({ idQuestion: prevState.idQuestion + 1 }));\n    }\n\n    const goodAnswer = this.storedDataRef.current[this.state.idQuestion].answer;\n    if (this.state.userAnswer === goodAnswer) {\n      this.setState((prevState) => ({ score: prevState.score + 1 }));\n\n      toast.success(\"Bravo +1\", {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        bodyClassName: \"toastify-color\",\n      });\n    } else {\n      toast.error(\"RatÃ© 0\", {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        bodyClassName: \"toastify-color\",\n      });\n    }\n  };\n  componentDidUpdate(PrevProps, prevState) {\n    if (\n      this.state.storedQuestion !== prevState.storedQuestion &&\n      this.state.storedQuestion.length\n    ) {\n      this.setState({\n        question: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options,\n      });\n    }\n\n    if (\n      this.state.idQuestion !== prevState.idQuestion &&\n      this.state.storedQuestion.length\n    ) {\n      this.setState({\n        question: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options,\n        userAnswer: null,\n        btnDisabled: true,\n      });\n    }\n\n    if (this.props.userData.pseudo !== PrevProps.userData.pseudo) {\n      this.showToastMsg(this.props.userData.pseudo);\n    }\n  }\n\n  submitAnswer = (selectedAnswer) => {\n    this.setState({\n      userAnswer: selectedAnswer,\n      btnDisabled: false,\n    });\n  };\n\n  getPercentage = (maxquest, ourScore) => (ourScore / maxquest) * 100;\n\n  gameOver = () => {\n    const gradePercent = this.getPercentage(\n      this.state.maxQuestions,\n      this.state.score\n    );\n\n    if (gradePercent >= 50) {\n      this.setState({\n        quizLevel: this.state.quizLevel + 1,\n        percent: gradePercent,\n      });\n    } else {\n      this.setState({\n        percent: gradePercent,\n      });\n    }\n  };\n\n  loadLevelQuestion = (param) => {\n    this.setState({\n      ...this.initialState,\n      quizLevel: param,\n    });\n    this.loadQuestion(this.state.levelNames[param]);\n  };\n\n  render() {\n    const displayOptions = this.state.options.map((option, index) => {\n      return (\n        <p\n          key={index}\n          className={`answerOptions ${\n            this.state.userAnswer === option ? \"selected\" : null\n          }`}\n          onClick={() => this.submitAnswer(option)}\n        >\n          {option}\n        </p>\n      );\n    });\n\n    return this.state.quizEnd ? (\n      <QuizOver\n        ref={this.storedDataRef}\n        levelNames={this.state.levelNames}\n        score={this.state.score}\n        maxQuestion={this.state.maxQuestions}\n        quizLevel={this.state.quizLevel}\n        percent={this.state.percent}\n        loadLevelQuestion={this.loadLevelQuestion}\n      />\n    ) : (\n      <Fragment>\n        <Levels />\n        <ProgressBar\n          idQuestion={this.state.idQuestion}\n          maxQuestions={this.state.maxQuestions}\n        />\n        <h2>{this.state.question}</h2>\n        {displayOptions}\n        <button\n          onClick={this.nextQuestion}\n          disabled={this.state.btnDisabled}\n          className=\"btnSubmit\"\n        >\n          {this.state.idQuestion < this.state.maxQuestions - 1\n            ? \"Suivant\"\n            : \"Terminer\"}\n        </button>\n      </Fragment>\n    );\n  }\n}\n\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}