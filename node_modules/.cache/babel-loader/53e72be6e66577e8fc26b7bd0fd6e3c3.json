{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu2004/Projets/marvel-test/src/components/QuizOver/index.js\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { GiTrophyCup } from \"react-icons/gi\";\nimport Loader from \"../Loader\";\nimport Modal from \"../Modal\";\nconst QuizOver = React.forwardRef((props, ref) => {\n  const {\n    levelNames,\n    score,\n    maxQuestion,\n    quizLevel,\n    percent,\n    loadLevelQuestion\n  } = props;\n  const API_PUBLIC_KEY = process.env.REACT_APP_MARVEL_API_KEY;\n  console.log(API_PUBLIC_KEY);\n  const hash = \"0b377a7a2e4d514d3d3b9cd624d50c4e\";\n  const [asked, setAsked] = useState([]);\n  const [openModal, setOpenModal] = useState(false);\n  useEffect(() => {\n    setAsked(ref.current);\n  }, [ref]);\n\n  const showModal = id => {\n    setOpenModal(true);\n    axios.get().then(response => {\n      console.log(response);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const hideModal = () => {\n    setOpenModal(false);\n  };\n\n  const averageGrade = maxQuestion / 2;\n\n  if (score < averageGrade) {\n    setTimeout(() => {\n      loadLevelQuestion(quizLevel);\n    }, 3000);\n  }\n\n  const decision = score >= averageGrade ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stepsBtnContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, quizLevel < levelNames.length ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"successMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  }, \"Bravo, passez au niveau suivant\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btnResult success\",\n    onClick: () => loadLevelQuestion(quizLevel),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }, \"Niveau suivant\")) : /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"successMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }, \" \", /*#__PURE__*/React.createElement(GiTrophyCup, {\n    size: \"50px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }), \" Bravo vous \\xEAtes un expert\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btnResult gameOver\",\n    onClick: () => loadLevelQuestion(0),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 15\n    }\n  }, \"Accueil\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"percentage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progressPercent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, \"R\\xE9ussite : \", percent, \" %\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progressPercent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, \"note : \", score, \"/\", maxQuestion))) : /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stepsBtnContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"failureMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, \"Vous avez \\xE9chou\\xE9 !\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"percentage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progressPercent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, \"R\\xE9ussite : \", percent, \" %\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progressPercent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, \"note : \", score, \"/\", maxQuestion)));\n  const questionAnswer = score >= averageGrade ? asked.map(question => {\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: question.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, question.question), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }, question.answer), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btnInfo\",\n      onClick: () => showModal(question.heroId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }, \"Info\"));\n  }) : /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    colSpan: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    loadingMsg: \"Pas de r√©ponse\",\n    styling: {\n      textAlign: \"center\",\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  })));\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  }, decision, /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, \"Les r\\xE9ponses aux questions pos\\xE9es\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answerContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"answers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 15\n    }\n  }, \"Question\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 15\n    }\n  }, \"r\\xE9ponse\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 15\n    }\n  }, \"infos\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  }, questionAnswer))), /*#__PURE__*/React.createElement(Modal, {\n    showModal: openModal,\n    hideModal: hideModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modalHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, \"H2\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modalBody\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }, \"h3\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modalFooter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"modalBtn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }, \"Fermer\"))));\n});\nexport default React.memo(QuizOver);","map":{"version":3,"sources":["/home/ubuntu2004/Projets/marvel-test/src/components/QuizOver/index.js"],"names":["React","Fragment","useEffect","useState","axios","GiTrophyCup","Loader","Modal","QuizOver","forwardRef","props","ref","levelNames","score","maxQuestion","quizLevel","percent","loadLevelQuestion","API_PUBLIC_KEY","process","env","REACT_APP_MARVEL_API_KEY","console","log","hash","asked","setAsked","openModal","setOpenModal","current","showModal","id","get","then","response","catch","err","hideModal","averageGrade","setTimeout","decision","length","questionAnswer","map","question","answer","heroId","textAlign","color","memo"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { GiTrophyCup } from \"react-icons/gi\";\nimport Loader from \"../Loader\";\nimport Modal from \"../Modal\";\n\nconst QuizOver = React.forwardRef((props, ref) => {\n  const {\n    levelNames,\n    score,\n    maxQuestion,\n    quizLevel,\n    percent,\n    loadLevelQuestion,\n  } = props;\n\n  const API_PUBLIC_KEY = process.env.REACT_APP_MARVEL_API_KEY;\n  console.log(API_PUBLIC_KEY);\n\n  const hash = \"0b377a7a2e4d514d3d3b9cd624d50c4e\";\n\n  const [asked, setAsked] = useState([]);\n  const [openModal, setOpenModal] = useState(false);\n\n  useEffect(() => {\n    setAsked(ref.current);\n  }, [ref]);\n\n  const showModal = (id) => {\n    setOpenModal(true);\n\n    axios\n      .get()\n      .then((response) => {\n        console.log(response);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const hideModal = () => {\n    setOpenModal(false);\n  };\n\n  const averageGrade = maxQuestion / 2;\n\n  if (score < averageGrade) {\n    setTimeout(() => {\n      loadLevelQuestion(quizLevel);\n    }, 3000);\n  }\n\n  const decision =\n    score >= averageGrade ? (\n      <Fragment>\n        <div className=\"stepsBtnContainer\">\n          {quizLevel < levelNames.length ? (\n            <Fragment>\n              <p className=\"successMsg\">Bravo, passez au niveau suivant</p>\n              <button\n                className=\"btnResult success\"\n                onClick={() => loadLevelQuestion(quizLevel)}\n              >\n                Niveau suivant\n              </button>\n            </Fragment>\n          ) : (\n            <Fragment>\n              <p className=\"successMsg\">\n                {\" \"}\n                <GiTrophyCup size=\"50px\" /> Bravo vous √™tes un expert\n              </p>\n              <button\n                className=\"btnResult gameOver\"\n                onClick={() => loadLevelQuestion(0)}\n              >\n                Accueil\n              </button>\n            </Fragment>\n          )}\n        </div>\n        <div className=\"percentage\">\n          <div className=\"progressPercent\">R√©ussite : {percent} %</div>\n          <div className=\"progressPercent\">\n            note : {score}/{maxQuestion}\n          </div>\n        </div>\n      </Fragment>\n    ) : (\n      <Fragment>\n        <div className=\"stepsBtnContainer\">\n          <p className=\"failureMsg\">Vous avez √©chou√© !</p>\n        </div>\n        <div className=\"percentage\">\n          <div className=\"progressPercent\">R√©ussite : {percent} %</div>\n          <div className=\"progressPercent\">\n            note : {score}/{maxQuestion}\n          </div>\n        </div>\n      </Fragment>\n    );\n\n  const questionAnswer =\n    score >= averageGrade ? (\n      asked.map((question) => {\n        return (\n          <tr key={question.id}>\n            <td>{question.question}</td>\n            <td>{question.answer}</td>\n            <button\n              className=\"btnInfo\"\n              onClick={() => showModal(question.heroId)}\n            >\n              Info\n            </button>\n          </tr>\n        );\n      })\n    ) : (\n      <tr>\n        <td colSpan=\"3\">\n          <Loader\n            loadingMsg={\"Pas de r√©ponse\"}\n            styling={{ textAlign: \"center\", color: \"red\" }}\n          />\n        </td>\n      </tr>\n    );\n\n  return (\n    <Fragment>\n      {decision}\n      <hr />\n      <p>Les r√©ponses aux questions pos√©es</p>\n\n      <div className=\"answerContainer\">\n        <table className=\"answers\">\n          <thead>\n            <tr>\n              <th>Question</th>\n              <th>r√©ponse</th>\n              <th>infos</th>\n            </tr>\n          </thead>\n          <tbody>{questionAnswer}</tbody>\n        </table>\n      </div>\n\n      <Modal showModal={openModal} hideModal={hideModal}>\n        <div className=\"modalHeader\">\n          <h2>H2</h2>\n        </div>\n        <div className=\"modalBody\">\n          <h3>h3</h3>\n        </div>\n        <div className=\"modalFooter\">\n          <button className=\"modalBtn\">Fermer</button>\n        </div>\n      </Modal>\n    </Fragment>\n  );\n});\n\nexport default React.memo(QuizOver);\n"]},"metadata":{},"sourceType":"module"}