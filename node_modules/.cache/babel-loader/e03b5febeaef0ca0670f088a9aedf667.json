{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu2004/Projets/marvel-test/src/components/Quiz/index.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\nimport { QuizMarvel } from \"../QuizMarvel \";\nimport QuizOver from \"../QuizOver\";\ntoast.configure();\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      levelNames: [\"debutant\", \"confirme\", \"expert\"],\n      quizLevel: 0,\n      maxQuestions: 10,\n      storedQuestion: [],\n      question: null,\n      options: [],\n      idQuestion: 0,\n      btnDisabled: true,\n      userAnswer: null,\n      score: 0,\n      showWelcomeMsg: false,\n      quizEnd: false,\n      percent: null\n    };\n    this.storedDataRef = React.createRef();\n\n    this.loadQuestion = quizz => {\n      const fetchedArrayQuiz = QuizMarvel[0].quizz[quizz];\n\n      if (fetchedArrayQuiz.length >= this.state.maxQuestions) {\n        this.storedDataRef.current = fetchedArrayQuiz;\n        const newArray = fetchedArrayQuiz.map(({\n          answer,\n          ...keepRest\n        }) => keepRest);\n        this.setState({\n          storedQuestion: newArray\n        });\n      } else {\n        console.log(\"Pas assez de questions\");\n      }\n    };\n\n    this.showWelcomeMsg = pseudo => {\n      if (!this.state.showWelcomeMsg) {\n        this.setState({\n          showWelcomeMsg: true\n        });\n        toast.warn(`Bienvenue ${pseudo}, et bonne chance!`, {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: false,\n          bodyClassName: \"toastify-color-welcome\"\n        });\n      }\n    };\n\n    this.nextQuestion = () => {\n      if (this.state.idQuestion === this.state.maxQuestions - 1) {\n        this.setState({\n          quizEnd: true\n        });\n      } else {\n        this.setState(prevState => ({\n          idQuestion: prevState.idQuestion + 1\n        }));\n      }\n\n      const goodAnswer = this.storedDataRef.current[this.state.idQuestion].answer;\n\n      if (this.state.userAnswer === goodAnswer) {\n        this.setState(prevState => ({\n          score: prevState.score + 1\n        }));\n        toast.success(\"Bravo +1\", {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          bodyClassName: \"toastify-color\"\n        });\n      } else {\n        toast.error(\"RatÃ© 0\", {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          bodyClassName: \"toastify-color\"\n        });\n      }\n    };\n\n    this.submitAnswer = selectedAnswer => {\n      this.setState({\n        userAnswer: selectedAnswer,\n        btnDisabled: false\n      });\n    };\n\n    this.getPercentage = (maxquest, ourScore) => ourScore / maxquest * 100;\n\n    this.gameOver = () => {\n      const gradePercent = this.getPercentage(this.state.maxQuestions, this.state.score);\n\n      if (gradePercent >= 50) {\n        this.setState({\n          quizLevel: this.state.quizLevel + 1,\n          percent: gradePercent,\n          quizEnd: true\n        });\n      } else {\n        this.setState({\n          percent: gradePercent,\n          quizEnd: true\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.loadQuestion(this.state.levelNames[this.state.quizLevel]);\n  }\n\n  componentDidUpdate(PrevProps, prevState) {\n    if (this.state.storedQuestion !== prevState.storedQuestion) {\n      this.setState({\n        question: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options\n      });\n    }\n\n    if (this.state.idQuestion !== prevState.idQuestion) {\n      this.setState({\n        question: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options,\n        userAnswer: null,\n        btnDisabled: true\n      });\n    }\n\n    if (this.props.userData.pseudo) {\n      this.showWelcomeMsg(this.props.userData.pseudo);\n    }\n  }\n\n  render() {\n    const displayOptions = this.state.options.map((option, index) => {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        key: index,\n        className: `answerOptions ${this.state.userAnswer === option ? \"selected\" : null}`,\n        onClick: () => this.submitAnswer(option),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }\n      }, option);\n    });\n    return this.state.quizEnd ? /*#__PURE__*/React.createElement(QuizOver, {\n      ref: this.storedDataRef,\n      levelNames: this.state.levelNames,\n      score: this.state.score,\n      maxQuestion: this.state.maxQuestions,\n      quizLevel: this.state.quizLevel,\n      percent: this.state.percent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 7\n      }\n    }) : /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Levels, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ProgressBar, {\n      idQuestion: this.state.idQuestion,\n      maxQuestions: this.state.maxQuestions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }\n    }, this.state.question), displayOptions, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.nextQuestion,\n      disabled: this.state.btnDisabled,\n      className: \"btnSubmit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }\n    }, this.state.idQuestion < this.state.maxQuestions - 1 ? \"Suivant\" : \"Terminer\"));\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/home/ubuntu2004/Projets/marvel-test/src/components/Quiz/index.js"],"names":["React","Component","Fragment","toast","Levels","ProgressBar","QuizMarvel","QuizOver","configure","Quiz","state","levelNames","quizLevel","maxQuestions","storedQuestion","question","options","idQuestion","btnDisabled","userAnswer","score","showWelcomeMsg","quizEnd","percent","storedDataRef","createRef","loadQuestion","quizz","fetchedArrayQuiz","length","current","newArray","map","answer","keepRest","setState","console","log","pseudo","warn","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","bodyClassName","nextQuestion","prevState","goodAnswer","success","error","submitAnswer","selectedAnswer","getPercentage","maxquest","ourScore","gameOver","gradePercent","componentDidMount","componentDidUpdate","PrevProps","props","userData","render","displayOptions","option","index"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\nimport { QuizMarvel } from \"../QuizMarvel \";\nimport QuizOver from \"../QuizOver\";\n\ntoast.configure();\n\nclass Quiz extends Component {\n  state = {\n    levelNames: [\"debutant\", \"confirme\", \"expert\"],\n    quizLevel: 0,\n    maxQuestions: 10,\n    storedQuestion: [],\n    question: null,\n    options: [],\n    idQuestion: 0,\n    btnDisabled: true,\n    userAnswer: null,\n    score: 0,\n    showWelcomeMsg: false,\n    quizEnd: false,\n    percent: null,\n  };\n\n  storedDataRef = React.createRef();\n\n  loadQuestion = (quizz) => {\n    const fetchedArrayQuiz = QuizMarvel[0].quizz[quizz];\n    if (fetchedArrayQuiz.length >= this.state.maxQuestions) {\n      this.storedDataRef.current = fetchedArrayQuiz;\n\n      const newArray = fetchedArrayQuiz.map(\n        ({ answer, ...keepRest }) => keepRest\n      );\n      this.setState({\n        storedQuestion: newArray,\n      });\n    } else {\n      console.log(\"Pas assez de questions\");\n    }\n  };\n\n  showWelcomeMsg = (pseudo) => {\n    if (!this.state.showWelcomeMsg) {\n      this.setState({\n        showWelcomeMsg: true,\n      });\n      toast.warn(`Bienvenue ${pseudo}, et bonne chance!`, {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: false,\n        bodyClassName: \"toastify-color-welcome\",\n      });\n    }\n  };\n  componentDidMount() {\n    this.loadQuestion(this.state.levelNames[this.state.quizLevel]);\n  }\n\n  nextQuestion = () => {\n    if (this.state.idQuestion === this.state.maxQuestions - 1) {\n      this.setState({ quizEnd: true });\n    } else {\n      this.setState((prevState) => ({ idQuestion: prevState.idQuestion + 1 }));\n    }\n\n    const goodAnswer = this.storedDataRef.current[this.state.idQuestion].answer;\n    if (this.state.userAnswer === goodAnswer) {\n      this.setState((prevState) => ({ score: prevState.score + 1 }));\n\n      toast.success(\"Bravo +1\", {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        bodyClassName: \"toastify-color\",\n      });\n    } else {\n      toast.error(\"RatÃ© 0\", {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        bodyClassName: \"toastify-color\",\n      });\n    }\n  };\n  componentDidUpdate(PrevProps, prevState) {\n    if (this.state.storedQuestion !== prevState.storedQuestion) {\n      this.setState({\n        question: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options,\n      });\n    }\n\n    if (this.state.idQuestion !== prevState.idQuestion) {\n      this.setState({\n        question: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options,\n        userAnswer: null,\n        btnDisabled: true,\n      });\n    }\n\n    if (this.props.userData.pseudo) {\n      this.showWelcomeMsg(this.props.userData.pseudo);\n    }\n  }\n\n  submitAnswer = (selectedAnswer) => {\n    this.setState({\n      userAnswer: selectedAnswer,\n      btnDisabled: false,\n    });\n  };\n\n  getPercentage = (maxquest, ourScore) => (ourScore / maxquest) * 100;\n\n  gameOver = () => {\n    const gradePercent = this.getPercentage(\n      this.state.maxQuestions,\n      this.state.score\n    );\n\n    if (gradePercent >= 50) {\n      this.setState({\n        quizLevel: this.state.quizLevel + 1,\n        percent: gradePercent,\n        quizEnd: true,\n      });\n    } else {\n      this.setState({\n        percent: gradePercent,\n        quizEnd: true,\n      });\n    }\n  };\n\n  render() {\n    const displayOptions = this.state.options.map((option, index) => {\n      return (\n        <p\n          key={index}\n          className={`answerOptions ${\n            this.state.userAnswer === option ? \"selected\" : null\n          }`}\n          onClick={() => this.submitAnswer(option)}\n        >\n          {option}\n        </p>\n      );\n    });\n\n    return this.state.quizEnd ? (\n      <QuizOver\n        ref={this.storedDataRef}\n        levelNames={this.state.levelNames}\n        score={this.state.score}\n        maxQuestion={this.state.maxQuestions}\n        quizLevel={this.state.quizLevel}\n        percent={this.state.percent}\n      />\n    ) : (\n      <Fragment>\n        <Levels />\n        <ProgressBar\n          idQuestion={this.state.idQuestion}\n          maxQuestions={this.state.maxQuestions}\n        />\n        <h2>{this.state.question}</h2>\n        {displayOptions}\n        <button\n          onClick={this.nextQuestion}\n          disabled={this.state.btnDisabled}\n          className=\"btnSubmit\"\n        >\n          {this.state.idQuestion < this.state.maxQuestions - 1\n            ? \"Suivant\"\n            : \"Terminer\"}\n        </button>\n      </Fragment>\n    );\n  }\n}\n\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}