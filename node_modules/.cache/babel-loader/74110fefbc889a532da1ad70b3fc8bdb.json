{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu2004/Projets/marvel-test/src/components/Quiz/index.js\";\nimport React, { Component } from \"react\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\nimport { QuizMarvel } from \"../QuizMarvel \";\ntoast.configure();\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      levelNames: [\"debutant\", \"confirme\", \"expert\"],\n      quizLevel: 0,\n      maxQuestions: 10,\n      storedQuestion: [],\n      question: null,\n      options: [],\n      idQuestion: 0,\n      btnDisabled: true,\n      userAnswer: null,\n      score: 0,\n      showWelcomeMsg: false\n    };\n    this.storedDataRef = React.createRef();\n\n    this.loadQuestion = quizz => {\n      const fetchedArrayQuiz = QuizMarvel[0].quizz[quizz];\n\n      if (fetchedArrayQuiz.length >= this.state.maxQuestions) {\n        this.storedDataRef.current = fetchedArrayQuiz;\n        const newArray = fetchedArrayQuiz.map(({\n          answer,\n          ...keepRest\n        }) => keepRest);\n        this.setState({\n          storedQuestion: newArray\n        });\n      } else {\n        console.log(\"Pas assez de questions\");\n      }\n    };\n\n    this.showWelcomeMsg = pseudo => {\n      if (!this.state.showWelcomeMsg) {\n        this.setState({\n          showWelcomeMsg: true\n        });\n        toast.warn(`Bienvenue ${pseudo}, et bonne chance!`, {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: false,\n          bodyClassName: \"toastify-color-welcome\"\n        });\n      }\n    };\n\n    this.nextQuestion = prevState => {\n      if (this.idQuestion === this.maxQuestions - 1) {} else {\n        this.setState(prevState => ({\n          idQuestion: prevState.idQuestion + 1\n        }));\n        const goodAnswer = this.storedDataRef.current[this.state.idQuestion].answer;\n\n        if (this.state.userAnswer === goodAnswer) {\n          this.setState(prevState => ({\n            score: prevState.score + 1\n          }));\n          toast.success(\"Bravo +1\", {\n            position: \"top-right\",\n            autoClose: 2000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            bodyClassName: \"toastify-color\"\n          });\n        } else {\n          toast.error(\"RatÃ© 0\", {\n            position: \"top-right\",\n            autoClose: 2000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            bodyClassName: \"toastify-color\"\n          });\n        }\n      }\n    };\n\n    this.submitAnswer = selectedAnswer => {\n      this.setState({\n        userAnswer: selectedAnswer,\n        btnDisabled: false\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.loadQuestion(this.state.levelNames[this.state.quizLevel]);\n  }\n\n  componentDidUpdate(PrevProps, prevState) {\n    if (this.state.storedQuestion !== prevState.storedQuestion) {\n      this.setState({\n        question: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options\n      });\n      console.log(this.state.question);\n    }\n\n    if (this.state.idQuestion !== prevState.idQuestion) {\n      this.setState({\n        question: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options,\n        userAnswer: null,\n        btnDisabled: true\n      });\n    }\n\n    if (this.props.userData.pseudo) {\n      this.showWelcomeMsg(this.props.userData.pseudo);\n    }\n  }\n\n  render() {\n    const displayOptions = this.state.options.map((option, index) => {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        key: index,\n        className: `answerOptions ${this.state.userAnswer === option ? \"selected\" : null}`,\n        onClick: () => this.submitAnswer(option),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }\n      }, option);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Levels, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ProgressBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }\n    }, this.state.question), displayOptions, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.nextQuestion,\n      disabled: this.state.btnDisabled,\n      className: \"btnSubmit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }\n    }, \"Suivant\"));\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/home/ubuntu2004/Projets/marvel-test/src/components/Quiz/index.js"],"names":["React","Component","toast","Levels","ProgressBar","QuizMarvel","configure","Quiz","state","levelNames","quizLevel","maxQuestions","storedQuestion","question","options","idQuestion","btnDisabled","userAnswer","score","showWelcomeMsg","storedDataRef","createRef","loadQuestion","quizz","fetchedArrayQuiz","length","current","newArray","map","answer","keepRest","setState","console","log","pseudo","warn","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","bodyClassName","nextQuestion","prevState","goodAnswer","success","error","submitAnswer","selectedAnswer","componentDidMount","componentDidUpdate","PrevProps","props","userData","render","displayOptions","option","index"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\nimport { QuizMarvel } from \"../QuizMarvel \";\n\ntoast.configure();\n\nclass Quiz extends Component {\n  state = {\n    levelNames: [\"debutant\", \"confirme\", \"expert\"],\n    quizLevel: 0,\n    maxQuestions: 10,\n    storedQuestion: [],\n    question: null,\n    options: [],\n    idQuestion: 0,\n    btnDisabled: true,\n    userAnswer: null,\n    score: 0,\n    showWelcomeMsg: false,\n  };\n\n  storedDataRef = React.createRef();\n\n  loadQuestion = (quizz) => {\n    const fetchedArrayQuiz = QuizMarvel[0].quizz[quizz];\n    if (fetchedArrayQuiz.length >= this.state.maxQuestions) {\n      this.storedDataRef.current = fetchedArrayQuiz;\n\n      const newArray = fetchedArrayQuiz.map(\n        ({ answer, ...keepRest }) => keepRest\n      );\n      this.setState({\n        storedQuestion: newArray,\n      });\n    } else {\n      console.log(\"Pas assez de questions\");\n    }\n  };\n\n  showWelcomeMsg = (pseudo) => {\n    if (!this.state.showWelcomeMsg) {\n      this.setState({\n        showWelcomeMsg: true,\n      });\n      toast.warn(`Bienvenue ${pseudo}, et bonne chance!`, {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: false,\n        bodyClassName: \"toastify-color-welcome\",\n      });\n    }\n  };\n  componentDidMount() {\n    this.loadQuestion(this.state.levelNames[this.state.quizLevel]);\n  }\n\n  nextQuestion = (prevState) => {\n    if (this.idQuestion === this.maxQuestions - 1) {\n    } else {\n      this.setState((prevState) => ({ idQuestion: prevState.idQuestion + 1 }));\n\n      const goodAnswer = this.storedDataRef.current[this.state.idQuestion]\n        .answer;\n      if (this.state.userAnswer === goodAnswer) {\n        this.setState((prevState) => ({\n          score: prevState.score + 1,\n        }));\n        toast.success(\"Bravo +1\", {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          bodyClassName: \"toastify-color\",\n        });\n      } else {\n        toast.error(\"RatÃ© 0\", {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          bodyClassName: \"toastify-color\",\n        });\n      }\n    }\n  };\n\n  componentDidUpdate(PrevProps, prevState) {\n    if (this.state.storedQuestion !== prevState.storedQuestion) {\n      this.setState({\n        question: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options,\n      });\n      console.log(this.state.question);\n    }\n\n    if (this.state.idQuestion !== prevState.idQuestion) {\n      this.setState({\n        question: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options,\n        userAnswer: null,\n        btnDisabled: true,\n      });\n    }\n\n    if (this.props.userData.pseudo) {\n      this.showWelcomeMsg(this.props.userData.pseudo);\n    }\n  }\n\n  submitAnswer = (selectedAnswer) => {\n    this.setState({\n      userAnswer: selectedAnswer,\n      btnDisabled: false,\n    });\n  };\n  render() {\n    const displayOptions = this.state.options.map((option, index) => {\n      return (\n        <p\n          key={index}\n          className={`answerOptions ${\n            this.state.userAnswer === option ? \"selected\" : null\n          }`}\n          onClick={() => this.submitAnswer(option)}\n        >\n          {option}\n        </p>\n      );\n    });\n    return (\n      <div>\n        <Levels />\n        <ProgressBar />\n        <h2>{this.state.question}</h2>\n        {displayOptions}\n        <button\n          onClick={this.nextQuestion}\n          disabled={this.state.btnDisabled}\n          className=\"btnSubmit\"\n        >\n          Suivant\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}