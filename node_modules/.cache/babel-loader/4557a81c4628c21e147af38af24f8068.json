{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu2004/Projets/marvel-test/src/components/Quiz/index.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\nimport { QuizMarvel } from \"../QuizMarvel \";\nimport QuizOver from \"../QuizOver\";\nimport { FaChevronRight } from \"react-icons/fa\";\ntoast.configure();\nconst initialState = {\n  levelNames: [\"debutant\", \"confirme\", \"expert\"],\n  quizLevel: 0,\n  maxQuestions: 10,\n  storedQuestion: [],\n  question: null,\n  options: [],\n  idQuestion: 0,\n  btnDisabled: true,\n  userAnswer: null,\n  score: 0,\n  showWelcomeMsg: false,\n  quizEnd: false,\n  percent: null\n};\n\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadQuestion = quizz => {\n      const fetchedArrayQuiz = QuizMarvel[0].quizz[quizz];\n\n      if (fetchedArrayQuiz.length >= this.state.maxQuestions) {\n        this.storedDataRef.current = fetchedArrayQuiz;\n        const newArray = fetchedArrayQuiz.map(({\n          answer,\n          ...keepRest\n        }) => keepRest);\n        this.setState({\n          storedQuestion: newArray\n        });\n      } else {\n        console.log(\"Pas assez de questions\");\n      }\n    };\n\n    this.showToastMsg = pseudo => {\n      if (!this.state.showWelcomeMsg) {\n        this.setState({\n          showWelcomeMsg: true\n        });\n        toast.warn(`Bienvenue ${pseudo}, et bonne chance!`, {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: false,\n          bodyClassName: \"toastify-color-welcome\"\n        });\n      }\n    };\n\n    this.nextQuestion = () => {\n      if (this.state.idQuestion === this.state.maxQuestions - 1) {\n        //this.gameOver();\n        this.setState({\n          quizEnd: true\n        });\n      } else {\n        this.setState(prevState => ({\n          idQuestion: prevState.idQuestion + 1\n        }));\n      }\n\n      const goodAnswer = this.storedDataRef.current[this.state.idQuestion].answer;\n\n      if (this.state.userAnswer === goodAnswer) {\n        this.setState(prevState => ({\n          score: prevState.score + 1\n        }));\n        toast.success(\"Bravo +1\", {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          bodyClassName: \"toastify-color\"\n        });\n      } else {\n        toast.error(\"RatÃ© 0\", {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          bodyClassName: \"toastify-color\"\n        });\n      }\n    };\n\n    this.submitAnswer = selectedAnswer => {\n      this.setState({\n        userAnswer: selectedAnswer,\n        btnDisabled: false\n      });\n    };\n\n    this.getPercentage = (maxquest, ourScore) => ourScore / maxquest * 100;\n\n    this.gameOver = percent => {\n      if (percent >= 50) {\n        this.setState({\n          quizLevel: this.state.quizLevel + 1,\n          percent: percent\n        });\n      } else {\n        this.setState({\n          percent: percent\n        });\n      }\n    };\n\n    this.loadLevelQuestion = param => {\n      this.setState({ ...this.initialState,\n        quizLevel: param\n      });\n      this.loadQuestion(this.state.levelNames[param]);\n    };\n\n    this.state = initialState;\n    this.storedDataRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.loadQuestion(this.state.levelNames[this.state.quizLevel]);\n  }\n\n  componentDidUpdate(PrevProps, prevState) {\n    if (this.state.storedQuestion !== prevState.storedQuestion && this.state.storedQuestion.length) {\n      this.setState({\n        question: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options\n      });\n    }\n\n    if (this.state.idQuestion !== prevState.idQuestion && this.state.storedQuestion.length) {\n      this.setState({\n        question: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options,\n        userAnswer: null,\n        btnDisabled: true\n      });\n    }\n\n    if (this.state.quizEnd !== prevState.quizEnd) {\n      const gradePercent = this.getPercentage(this.state.maxQuestions, this.state.score);\n      this.gameOver(gradePercent);\n    }\n\n    if (this.props.userData.pseudo !== PrevProps.userData.pseudo) {\n      this.showToastMsg(this.props.userData.pseudo);\n    }\n  }\n\n  render() {\n    const {\n      levelNames,\n      quizLevel,\n      maxQuestions,\n      storedQuestion,\n      question,\n      options,\n      idQuestion,\n      btnDisabled,\n      userAnswer,\n      score,\n      showWelcomeMsg,\n      quizEnd,\n      percent\n    } = this.state;\n    const displayOptions = this.state.options.map((option, index) => {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        key: index,\n        className: `answerOptions ${this.state.userAnswer === option ? \"selected\" : null}`,\n        onClick: () => this.submitAnswer(option),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(FaChevronRight, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }\n      }), \" \", option);\n    });\n    return this.state.quizEnd ? /*#__PURE__*/React.createElement(QuizOver, {\n      ref: this.storedDataRef,\n      levelNames: levelNames,\n      score: score,\n      maxQuestion: maxQuestions,\n      quizLevel: quizLevel,\n      percent: percent,\n      loadLevelQuestion: this.loadLevelQuestion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 7\n      }\n    }) : /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Levels, {\n      levelNames: levelNames,\n      quizLevel: quizLevel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ProgressBar, {\n      idQuestion: idQuestion,\n      maxQuestions: maxQuestions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }\n    }, question), displayOptions, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.nextQuestion,\n      disabled: btnDisabled,\n      className: \"btnSubmit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }\n    }, idQuestion < maxQuestions - 1 ? \"Suivant\" : \"Terminer\"));\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/home/ubuntu2004/Projets/marvel-test/src/components/Quiz/index.js"],"names":["React","Component","Fragment","toast","Levels","ProgressBar","QuizMarvel","QuizOver","FaChevronRight","configure","initialState","levelNames","quizLevel","maxQuestions","storedQuestion","question","options","idQuestion","btnDisabled","userAnswer","score","showWelcomeMsg","quizEnd","percent","Quiz","constructor","props","loadQuestion","quizz","fetchedArrayQuiz","length","state","storedDataRef","current","newArray","map","answer","keepRest","setState","console","log","showToastMsg","pseudo","warn","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","bodyClassName","nextQuestion","prevState","goodAnswer","success","error","submitAnswer","selectedAnswer","getPercentage","maxquest","ourScore","gameOver","loadLevelQuestion","param","createRef","componentDidMount","componentDidUpdate","PrevProps","gradePercent","userData","render","displayOptions","option","index"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport Levels from \"../Levels\";\nimport ProgressBar from \"../ProgressBar\";\nimport { QuizMarvel } from \"../QuizMarvel \";\nimport QuizOver from \"../QuizOver\";\nimport { FaChevronRight } from \"react-icons/fa\";\n\ntoast.configure();\n\nconst initialState = {\n  levelNames: [\"debutant\", \"confirme\", \"expert\"],\n  quizLevel: 0,\n  maxQuestions: 10,\n  storedQuestion: [],\n  question: null,\n  options: [],\n  idQuestion: 0,\n  btnDisabled: true,\n  userAnswer: null,\n  score: 0,\n  showWelcomeMsg: false,\n  quizEnd: false,\n  percent: null,\n};\n\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = initialState;\n    this.storedDataRef = React.createRef();\n  }\n\n  loadQuestion = (quizz) => {\n    const fetchedArrayQuiz = QuizMarvel[0].quizz[quizz];\n    if (fetchedArrayQuiz.length >= this.state.maxQuestions) {\n      this.storedDataRef.current = fetchedArrayQuiz;\n\n      const newArray = fetchedArrayQuiz.map(\n        ({ answer, ...keepRest }) => keepRest\n      );\n      this.setState({\n        storedQuestion: newArray,\n      });\n    } else {\n      console.log(\"Pas assez de questions\");\n    }\n  };\n\n  showToastMsg = (pseudo) => {\n    if (!this.state.showWelcomeMsg) {\n      this.setState({\n        showWelcomeMsg: true,\n      });\n      toast.warn(`Bienvenue ${pseudo}, et bonne chance!`, {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: false,\n        bodyClassName: \"toastify-color-welcome\",\n      });\n    }\n  };\n  componentDidMount() {\n    this.loadQuestion(this.state.levelNames[this.state.quizLevel]);\n  }\n\n  nextQuestion = () => {\n    if (this.state.idQuestion === this.state.maxQuestions - 1) {\n      //this.gameOver();\n      this.setState({\n        quizEnd: true,\n      });\n    } else {\n      this.setState((prevState) => ({ idQuestion: prevState.idQuestion + 1 }));\n    }\n\n    const goodAnswer = this.storedDataRef.current[this.state.idQuestion].answer;\n    if (this.state.userAnswer === goodAnswer) {\n      this.setState((prevState) => ({ score: prevState.score + 1 }));\n\n      toast.success(\"Bravo +1\", {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        bodyClassName: \"toastify-color\",\n      });\n    } else {\n      toast.error(\"RatÃ© 0\", {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        bodyClassName: \"toastify-color\",\n      });\n    }\n  };\n  componentDidUpdate(PrevProps, prevState) {\n    if (\n      this.state.storedQuestion !== prevState.storedQuestion &&\n      this.state.storedQuestion.length\n    ) {\n      this.setState({\n        question: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options,\n      });\n    }\n\n    if (\n      this.state.idQuestion !== prevState.idQuestion &&\n      this.state.storedQuestion.length\n    ) {\n      this.setState({\n        question: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options,\n        userAnswer: null,\n        btnDisabled: true,\n      });\n    }\n\n    if (this.state.quizEnd !== prevState.quizEnd) {\n      const gradePercent = this.getPercentage(\n        this.state.maxQuestions,\n        this.state.score\n      );\n      this.gameOver(gradePercent);\n    }\n\n    if (this.props.userData.pseudo !== PrevProps.userData.pseudo) {\n      this.showToastMsg(this.props.userData.pseudo);\n    }\n  }\n\n  submitAnswer = (selectedAnswer) => {\n    this.setState({\n      userAnswer: selectedAnswer,\n      btnDisabled: false,\n    });\n  };\n\n  getPercentage = (maxquest, ourScore) => (ourScore / maxquest) * 100;\n\n  gameOver = (percent) => {\n    if (percent >= 50) {\n      this.setState({\n        quizLevel: this.state.quizLevel + 1,\n        percent: percent,\n      });\n    } else {\n      this.setState({\n        percent: percent,\n      });\n    }\n  };\n\n  loadLevelQuestion = (param) => {\n    this.setState({\n      ...this.initialState,\n      quizLevel: param,\n    });\n    this.loadQuestion(this.state.levelNames[param]);\n  };\n\n  render() {\n    const {\n      levelNames,\n      quizLevel,\n      maxQuestions,\n      storedQuestion,\n      question,\n      options,\n      idQuestion,\n      btnDisabled,\n      userAnswer,\n      score,\n      showWelcomeMsg,\n      quizEnd,\n      percent,\n    } = this.state;\n\n    const displayOptions = this.state.options.map((option, index) => {\n      return (\n        <p\n          key={index}\n          className={`answerOptions ${\n            this.state.userAnswer === option ? \"selected\" : null\n          }`}\n          onClick={() => this.submitAnswer(option)}\n        >\n          <FaChevronRight /> {option}\n        </p>\n      );\n    });\n\n    return this.state.quizEnd ? (\n      <QuizOver\n        ref={this.storedDataRef}\n        levelNames={levelNames}\n        score={score}\n        maxQuestion={maxQuestions}\n        quizLevel={quizLevel}\n        percent={percent}\n        loadLevelQuestion={this.loadLevelQuestion}\n      />\n    ) : (\n      <Fragment>\n        <Levels levelNames={levelNames} quizLevel={quizLevel} />\n        <ProgressBar idQuestion={idQuestion} maxQuestions={maxQuestions} />\n        <h2>{question}</h2>\n        {displayOptions}\n        <button\n          onClick={this.nextQuestion}\n          disabled={btnDisabled}\n          className=\"btnSubmit\"\n        >\n          {idQuestion < maxQuestions - 1 ? \"Suivant\" : \"Terminer\"}\n        </button>\n      </Fragment>\n    );\n  }\n}\n\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}